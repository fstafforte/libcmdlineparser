#ifndef __CommandLineExceptions_Header__
#define __CommandLineExceptions_Header__

#include  <stdexcept>

using namespace std;
/** @brief This class represent an exception\n
*          generated by parser when a mandatory\n
*          option is not present in the command line\n
**/
class MissingMandatoryOptionException : public runtime_error {
public:
  /** 
  * @param message contains the option flags
  */
  MissingMandatoryOptionException(const string& message)
  : runtime_error("Missing mandatory option: " + message) {
  }
};

/** @brief This class represent an exception\n
*          generated by parser when an option has a mandatory argument\n
*          but it is not present in the command line\n
**/
class MissingMandatoryArgumentException : public runtime_error {
public:
  /** 
  * @param message contains the option flags
  */
  MissingMandatoryArgumentException(const string& message)
  : runtime_error("Missing mandatory argument: " + message) {
  }
};

/** @brief This class represent an exception\n
*          generated by parser when an option type \n
*          passed to the parser to retrive its value\n
*          is not among the parser reconized types.\n
*          Please check your source code!!!
**/
class InvalidCommandLineOptionException : public runtime_error {
public:
  
  /** 
  * @param message contains the message indicating that\n
  *                the option passed to parser to get its value\n
  *                is not regonized.\n
  */
  InvalidCommandLineOptionException(const string& message)
  : runtime_error("Invalid command line option: " + message) {
  }
};


/** @brief This class represent an exception\n
*          generated by parser when an option argument type \n
*          passed to the parser is not a valid type\n
*          (i.g you pass a floating point as argument to an option that\n
*           requires a floating point value).\n
*          Please check your source code!!!\n
**/
class InvalidCommandLineOptionArgumentException : public runtime_error {
public:
  /** 
  * @param message contains the message indicating that\n
  *                the option argument passed to parser is not \n
  *                of the same type required by option\n
  */
  InvalidCommandLineOptionArgumentException(const string& message)
  : runtime_error("Invalid command line option argument: " + message) {
  }
};

/** @brief This class represent an exception\n
*          generated by parser when in the command line is present\n
*          an unknown option\n
**/
class UnknownCommandLineOptionException : public runtime_error {
public:
  /** 
  * @param message contains the comman line switch that represent\n
  *                the unknown option
  */
  UnknownCommandLineOptionException(const string& message)
  : runtime_error("Unknown command line option: " + message) {
  }
};

/** @brief This class represent an exception\n
*          generated by parser when in the code you already add\n
*          an option with the same short and/or a long option flag.\n
*          Please check your code!!!\n
**/
class CommandLineOptionAlreadyExistsException : public runtime_error {
public:
  /** 
  * @param message contains the option flags of the already existing option
  */
  CommandLineOptionAlreadyExistsException(const string& message)
  : runtime_error("Command line option already exists: " + message) {
  }
};

/** @brief This class represent an exception\n
*          generated by parser when in the command line there is \n
*          an option flag that can be confused among different options\n
*          (i.g. "--ver" could be confused between "--verbose" or "--version")
*          
**/
class AmbigousCommandLineOptionException : public runtime_error {
public:
  /** 
  * @param message contains the option flags in the command line that generated ambiguity
  */
  AmbigousCommandLineOptionException(const string& message)
  : runtime_error("Ambiguous command line option: " + message) {
  }
};

#endif  // __CommandLineExceptions_Header__
